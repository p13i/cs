MODEL_CC_TEMPLATE = """// Auto-generated by cs/db/models/codegen.py.
#ifndef {HEADER_GUARD}
#define {HEADER_GUARD}

#include <iostream>
#include <map>
#include <string>
#include <vector>

#include "cs/net/json/object.hh"
#include "cs/net/json/parsers.hh"
#include "cs/net/json/serialize.hh"
#include "cs/result/result.hh"

namespace cs::db::models {open_brace}
namespace {open_brace}
using ::cs::net::json::Object;
using ::cs::net::json::SerializeObject;
using ::cs::net::json::Type;
using ::cs::net::json::parsers::ParseObject;
using ::cs::result::Error;
using ::cs::result::Ok;
using ::cs::result::Result;
using ::cs::result::ResultOr;
{close_brace}  // namespace

struct {ModelName} {open_brace}
{fields_list}

  {ModelName}() {open_brace}{close_brace}

  {ModelName}({ctor_args_list})
      : {ctor_init_list} {open_brace}{close_brace}

  friend std::ostream& operator<<(std::ostream& os,
                                  const {ModelName}& user) {open_brace}
    auto object = new Object({open_brace}
{serialize_list}
    {close_brace});
    return SerializeObject(os, object);
  {close_brace}

  Result JsonParse(std::string str) {open_brace}
    Object* object;
{parse_list}
    return Ok();
  {close_brace}

  std::string JsonSerialize() const {open_brace}
    std::stringstream ss;
    ss << *this;
    return ss.str();
  {close_brace}

  friend Result operator>>(std::istream& is, {ModelName}& {model_name}) {open_brace}
    std::stringstream ss;
    ss << is.rdbuf();
    return {model_name}.JsonParse(ss.str());
  {close_brace}
{close_brace};
{close_brace}  // namespace cs::db::models

#endif  // {HEADER_GUARD}
"""

""" Grammar:
  INPUT         -> WS "struct" WS ModelName WS BraceOpen
                    WS FieldsList WS
                    BraceClose WS EOF

  ModelName     -> [A-Za-z]+

  FieldsList    -> FieldType WS FieldName WS";"
  FieldType     -> "std::string" | "int" | "double"
  FieldName     -> [A-Za-z]+

  BraceOpen     -> "{"
  BraceClose    -> "}"

  WS            -> " " | "\n" | "\t"
  EOF           -> ""
"""



CC_DEF = """// My C++-style input file.
struct User {
  std::string name = "";
  std::string email = "";
}
"""



def main():


    template_args = {
        "HEADER_GUARD": "CS_DB_MODELS_USER_HH",
        "MODEL_NAME": "USER",
        "ModelName": "User",
        "fields_list": "  // Fields\n",
        "ctor_args_list": "",
        "ctor_init_list": "",
        "serialize_list": "",
        "parse_list": "",
        "model_name": "user",
        "open_brace": "{",
        "close_brace": "}",
    }
    rendered_template = MODEL_CC_TEMPLATE.format(**template_args)
    print(rendered_template)

if __name__ == "__main__":
    main()
